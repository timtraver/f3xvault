<?php
############################################################################
#	api.class
#
#	Tim Traver
#	3/11/2017
#	class to handle API operations
#
############################################################################
#

class API {
	public $user_id;
	public $user = array();
	public $function;
	public $input_variables = array();
	public $output_string;
	public $output_variables = array();
	public $error_code;
	public $error_string;
	public $functions = array();
	public $process_output;
	public $function_parameters = array();
	public $function_output_modes;
	public $function_output_description;
	public $function_output_parameters = array();
	public $field_separator;
	public $output_format;
	
	public function __construct() {
		# Function to initialize variables
		$this->error_code = 0;
		$this->error_string = '';
		$this->api_get_submitted_variables();

		$function = input_filter($_REQUEST['function'],'string');
		$this->function = $function;
		$this->set_api_functions();
		
		# Let us check how they want the output
		if( isset( $this->input_variables['output_format'] ) ){
			$this->input_variables['output_format'] = strtolower($this->input_variables['output_format']);
			switch( $this->input_variables['output_format'] ){
				case 'xml':
					$this->output_format = 'xml';
					break;
				case 'json':
					$this->output_format = 'json';
					break;
				default:
					$this->output_format = 'standard';
					break;
			}
		}
		return;
	}
	public function set_api_functions(){
		# This is to set up the available api functions
		$this->functions = array(
			"checkUser"					=> array("function_name" => "checkUser",				"event_permission" => 0,	"function_description" => 'Check User login and password and return user info. (no need to duplicate the given login and password from the standard API call.'),
			"showParameters"			=> array("function_name" => "showParameters",			"event_permission" => 0,	"function_description" => 'Show All the input parameters for a particular API function call.'),
			"getEventInfo"				=> array("function_name" => "getEventInfo",				"event_permission" => 0,	"function_description" => 'Get the basic information for an Event.'),
			"getEventInfoFull"			=> array("function_name" => "getEventInfoFull",			"event_permission" => 0,	"function_description" => 'Get the full information for an Event, including all completed rounds or draws.'),
			"getEventPilots"			=> array("function_name" => "getEventPilots",			"event_permission" => 0,	"function_description" => 'Get the pilot list for an Event.'),
			"getEventRound"				=> array("function_name" => "getEventRound",			"event_permission" => 0,	"function_description" => 'Get flight information for a single round.'),
			"getEventStandings"			=> array("function_name" => "getEventStandings",		"event_permission" => 0,	"function_description" => 'Get the current event standings.'),
			"getLocationInfo"			=> array("function_name" => "getLocationInfo",			"event_permission" => 0,	"function_description" => 'Get Detail Info for Location.'),
			"getPlaneInfo"				=> array("function_name" => "getPlaneInfo",				"event_permission" => 0,	"function_description" => 'Get Detail Info for Plane.'),
			"getPilotInfo"				=> array("function_name" => "getPilotInfo",				"event_permission" => 0,	"function_description" => 'Get Detail Info for Pilot.'),
			"searchLocations"			=> array("function_name" => "searchLocations",			"event_permission" => 0,	"function_description" => 'Search the database for location information.'),
			"searchPilots"				=> array("function_name" => "searchPilots",				"event_permission" => 0,	"function_description" => 'Search the database for pilot information.'),
			"searchPlanes"				=> array("function_name" => "searchPlanes",				"event_permission" => 0,	"function_description" => 'Search the database for planes.'),
			"searchEvents"				=> array("function_name" => "searchEvents",				"event_permission" => 0,	"function_description" => 'Search for events'),
			"postScore"					=> array("function_name" => "postScore",				"event_permission" => 1,	"function_description" => 'Post a score for a pilot to an event.'),
			"updateEventPilot"			=> array("function_name" => "updateEventPilot",			"event_permission" => 1,	"function_description" => 'Add or update pilot information to an event.'),
			"updateEventRoundStatus"	=> array("function_name" => "updateEventRoundStatus",	"event_permission" => 1,	"function_description" => 'Update the scoring status of a round.'),
			"createEvent"				=> array("function_name" => "createEvent",				"event_permission" => 0,	"function_description" => 'Create a new event.'),
			"createPilot"				=> array("function_name" => "createPilot",				"event_permission" => 0,	"function_description" => 'Create a new pilot in the system. Please use after searching for existing pilots to prevent duplicates.'),
		);
	}

	public function api_check_login(){
		# Function to check login credentials and access

		if(!isset($this->input_variables['login'])){
	        $this->error_code = 1;
	        $this->error_string = "You must enter a login.";
	        return 0;
	    }
		if(!isset($this->input_variables['password'])){
	        $this->error_code = 1;
	        $this->error_string = "You must enter a password.";
	        return 0;
	    }
	    $login = $this->input_variables['login'];
	    $password = $this->input_variables['password'];
	
		$sha1_pass = sha1($password);
	
	    # Let's get the user info to check the pass
	    $stmt = db_prep("
	        SELECT *
	        FROM user u
	        WHERE u.user_name =:login
	        	OR u.user_email =:login2
	    ");
	    $result = db_exec($stmt,array("login" => $login,"login2" => $login));
	    if(isset($result[0])) {
	        $user = $result[0];
	        if($user['user_status'] == 0){
	        	$this->error_code = 2;
				$this->error_string = "Unknown user.";
	            return 0;
	        }
	        if($sha1_pass != $user['user_pass']){
	        	$this->error_code = 2;
	        	$this->error_string = "User password is not correct.";
	            return 0;
	        }
	    }else{
	        $this->error_code = 2;
			$this->error_string = "User does not currently have a login. Please register with us!";
			return 0;
	    }

		# If it got here, then the password check was successful
		$this->user_id = $user['user_id'];
		$this->user = $user;
		$GLOBALS['user'] = $user;
		$GLOBALS['user_id'] = $this->user_id;
		return 1;
	}
	public function api_check_event_access(){
		# This is a routine to check and see if they have permission to edit this particular event
		if($this->functions[$this->function]['event_permission']){
			# Check access to this event
			$event_id = $this->input_variables['event_id'];
			if(!check_event_permission($event_id)){
				$this->error_code = 1;
				$this->error_string = "Unable to edit this event. Please adjust event permissions.";
				return 0;
			}			
		}
		return 1;
	}

	public function api_process_request(){
		# Function to make the call to process the request
		if(!array_key_exists($this->function, $this->functions)){
			$this->error_code = 1;
			$this->error_string = "Function not available.";
			return 0;
		}
		
		switch($this->function){
			case 'checkUser':
				include_library("api/checkUser.class");
				$request = new checkUser( $this );
				break;
			case 'showParameters':
				include_library("api/showParameters.class");
				$request = new showParameters($this);
				break;
			case 'getEventInfo':
				include_library("api/getEventInfo.class");
				$request = new getEventInfo($this);
				break;
			case 'getEventInfoFull':
				include_library("api/getEventInfoFull.class");
				$request = new getEventInfoFull($this);
				break;
			case 'getEventPilots':
				include_library("api/getEventPilots.class");
				$request = new getEventPilots($this);
				break;
			case 'getEventRound':
				include_library("api/getEventRound.class");
				$request = new getEventRound($this);
				break;
			case 'getEventStandings':
				include_library("api/getEventStandings.class");
				$request = new getEventStandings($this);
				break;
			case 'getLocationInfo':
				include_library("api/getLocationInfo.class");
				$request = new getLocationInfo($this);
				break;
			case 'getPlaneInfo':
				include_library("api/getPlaneInfo.class");
				$request = new getPlaneInfo($this);
				break;
			case 'getPilotInfo':
				include_library("api/getPilotInfo.class");
				$request = new getPilotInfo($this);
				break;
			case 'searchLocations':
				include_library("api/searchLocations.class");
				$request = new searchLocations($this);
				break;
			case 'searchPilots':
				include_library("api/searchPilots.class");
				$request = new searchPilots($this);
				break;
			case 'searchPlanes':
				include_library("api/searchPlanes.class");
				$request = new searchPlanes($this);
				break;
			case 'searchEvents':
				include_library("api/searchEvents.class");
				$request = new searchEvents($this);
				break;
			case 'postScore':
				include_library("api/postScore.class");
				$request = new postScore($this);
				break;
			case 'updateEventPilot':
				include_library("api/updateEventPilot.class");
				$request = new updateEventPilot($this);
				break;
			case 'updateEventRoundStatus':
				include_library("api/updateEventRoundStatus.class");
				$request = new updateEventRoundStatus($this);
				break;
			case 'createEvent':
				include_library("api/createEvent.class");
				$request = new createEvent($this);
				break;
			case 'createPilot':
				include_library("api/createPilot.class");
				$request = new createPilot($this);
				break;
			default :
				$this->error_code = 1;
				$this->error_string = "Function not available.";
				return 0;
		}
		if(!$this->api_check_function_parameters()){
			$this->error_code = 3;
			$this->error_string = "Not all mandatory fields supplied.\n";
			$this->error_string .= "Possible fields are as follows. * fields are mandatory.\n";
			$this->error_string .= "field_separator - Field Delimeter For Return Lines.\n";
			$this->error_string .= "output_type - Type of output format (standard, xml, json).\n";
			
			$fields = array();
			
			foreach($this->function_parameters as $field){
				if($field['mandatory'] == 1){
					$this->error_string .= '*';
				}
				$this->error_string .= $field['name'];
				$this->error_string .= " - ".$field['description']."\n";
				$fields[] = array( "name" => $field['name'], "description" => $field['description'], "mandatory" => $field['mandatory'] );
			}
			$this->api_add_output_variable( "field", $fields );

			return 0;
		}
				
		if(isset($_REQUEST['field_separator']) && $_REQUEST['field_separator'] != ''){
			$this->field_separator = $_REQUEST['field_separator'];
		}else{
			$this->field_separator = ',';
		}
		
		if(method_exists($request,'process_request')){
			$this->process_output = $request->process_request();
		}else{
			$this->error_code = 1;
			$this->error_string = "Method does not exist.";
			return 0;
		}
		return;
	}
	public function api_send_response(){
		# Routine to send the response
		# Lets add the response codes to the output variables first
		# Set response array
		$response_array = array();
		if($this->error_code != 0){
			# This request has an error
			$response_array['response_code'] = 0;
			$response_array['error_string'] = $this->error_code . " - " . $this->error_string;
		}else{
			$response_array['response_code'] = 1;
			$response_array['error_string'] = "";
		}
			
		$this->output_variables = array_merge( $response_array, $this->output_variables );
		if( $this->output_format == 'xml' ){
			include_library( "xmlarray.class" );
			header('Content-Type: application/xml');
			# Check for the need of CDATA attributes
			$this->output_variables = $this->array_check_for_cdata( $this->output_variables );
			$tempxml = Array2XML::createXML( 'result', $this->output_variables );
			$this->output_string .= $tempxml->saveXML();
			print $this->output_string;
		}elseif( $this->output_format == 'json' ){
			header('Content-type: application/json');
			$this->output_string .= json_encode( $this->output_variables, JSON_PARTIAL_OUTPUT_ON_ERROR );
			print $this->output_string;
		}else{
			# Lets first set the variable for the main return code and string
			if($this->error_code != 0){
				print "0\n";
				print $this->error_code . " - " . $this->error_string . "\n";
			}else{
				print "1\n";
				print $this->process_output;
			}
		}		
		return;
	}

	public function api_add_output_variable( $name, $value ){
		# Method to add a variable to the output
		$this->output_variables[ $name ] = $value;
	}
	public function api_get_submitted_variables(){
		# Function to set the input variables
		foreach( $_REQUEST as $name => $value ){
			$this->input_variables[$name] = $value;
		}
		return;
	}
	public function api_check_function_parameters(){
		# Method to check the input fields for mandatory entries and clean them base on their types
		$check = 1;
		foreach($this->function_parameters as $field){
			$field_name = $field['name'];
			if($field['mandatory'] == 1 && !isset($this->input_variables[$field_name])){
				$check = 0;
			}
			$type = $field['type'];
			switch($type){
				case 'integer':
					$this->input_variables[$field_name] = input_filter($this->input_variables[$field_name],'int');
					break;
				case 'string':
					$this->input_variables[$field_name] = input_filter($this->input_variables[$field_name],'string');
					break;
				case 'boolean':
					if(isset($_REQUEST[$field_name])){
						$this->input_variables[$field_name] = input_filter($this->input_variables[$field_name],'boolean');
					}else{
						$this->input_variables[$field_name] = 0;
					}
					break;
				case 'timestamp':
					$this->input_variables[$field_name] = input_filter($this->input_variables[$field_name],'int');
					break;
				case 'float':
					$this->input_variables[$field_name] = input_filter($this->input_variables[$field_name],'float');
					break;
				case 'date':
					$this->input_variables[$field_name] = input_filter($this->input_variables[$field_name],'string');
					break;					
			}
		}
		return $check;
	}
	public function array_check_for_cdata( $array ){
		array_walk_recursive( $array, 
		    function ( &$value ) {
		        if ( preg_match( '/[^0-9a-zA-Z_\.\:]/', $value ) && $value != '' ){
		            $value = array( '@cdata' => $value );
		        }
		    }
		);
		return $array;
	}

}

?>