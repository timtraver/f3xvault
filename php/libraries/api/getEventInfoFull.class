<?php
############################################################################
#	getEventInfoFull.class
#
#	Tim Traver
#	1/15/2018
#	class to extend API class to get a event info
#
############################################################################
#
include_library('event.class');

class getEventInfoFull {
	public $event_id;
	public $api;
	public $rounds;
	
	public function __construct($api){
		$this->api = $api;
		$this->set_function_parameters();
	}
	
	public function set_function_parameters(){
		# This is where we set the mandatory fields
		$this->api->function_parameters = array(
			array("name" => "event_id",	 "type" => "integer", "description" => "Event ID", "mandatory" => 1)
		);
		$this->api->function_output_description = 
			"Event ID, Event Name, Event_location, Event Start Date, Event End Date, Event Type, Number of Rounds\nOne Per line of the following\nPilot ID, Pilot Bib, Pilot First Name, Pilot Last Name, Class, AMA, FAI, Team Name\nIn between are each of the round flights for that pilot on a separate line. So if there are 4 rounds, then there are 4 lines after each pilot for the round info.\n\nFor F3F, each round has the following fields (Group, Flight Order, Flight Seconds, Penalty) for as many rounds as there are including draws.\nFor F3F, each round has the following fields (Group, Flight Order, sub1, sub2, sub3, sub4, sub5, sub6, sub7, sub8, sub9, sub10, sub11, Flight Seconds, Penalty) for as many rounds as there are including draws.\nFor F3K, each round has the following fields (Group, Flight Seconds, Penalty) for as many rounds as there are including draws.";
	}

	public function process_request(){
		global $smarty;
		
		# This is the method where we process the request
		$this->event_id = $this->api->input_variables['event_id'];
		start_smarty();

		$event = new Event($this->event_id);
		$event->get_draws();
		$event->get_rounds();

		$smarty->assign("event",$event);
		$smarty->assign("fs",$this->api->field_separator);
				
		$this->rounds = array();
		$total_rounds = 0;
		#Let's first fill it up with the current round info
		foreach($event->rounds as $round_number => $r){
			foreach($r['flights'] as $flight_type_id => $f){
				foreach($f['pilots'] as $event_pilot_id => $p){
					$this->rounds[$event_pilot_id][$round_number] = $p;
				}
			}
			if($round_number > $total_rounds){
				$total_rounds = $round_number;
			}
		}
#print_r($this->rounds);
		# Now lets step through the draws to fill out the rest of the rounds if any
		foreach($event->draws as $draw_id => $d){
			if($d['event_draw_active'] == 0){
				continue;
			}
			foreach($d['flights'] as $flight_type_id => $f){
				foreach($f as $round_number => $r){
					foreach($r['pilots'] as $event_pilot_id => $p){
						if(!isset($this->rounds[$event_pilot_id][$round_number])){
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_id'] = $p['event_pilot_id'];
							$this->rounds[$event_pilot_id][$round_number]['event_round_id'] = $p['event_round_id'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_group'] = $p['event_draw_round_group'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_order'] = $p['event_draw_round_order'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_penalty'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_penalty'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_minutes'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_seconds'] = 0;
						}
					}
					if($round_number > $total_rounds){
						$total_rounds = $round_number;
					}
				}
			}
		}
		
		if($total_rounds == 0 && isset($event->tasks)){
			$total_rounds = count($event->tasks);
		}
		$smarty->assign("total_rounds",$total_rounds);
		$smarty->assign("rounds",$this->rounds);

		$template = '';
		switch($event->info['event_type_code']){
			case "f3b":
				$template = "api/event_export_f3b.tpl";
				break;
			case "f3b_speed":
				$template = "api/event_export_f3b.tpl";
				break;
			case "f3f":
				$template = "api/event_export_f3f_full.tpl";
				break;
			case "f3f_plus":
				$template = "api/event_export_f3f_plus_full.tpl";
				break;
			case "f3k":
				$template = "api/event_export_f3k_full.tpl";
				break;
			case "f3j":
				$template = "api/event_export_f3j.tpl";
				break;
			case "td":
				$template = "api/event_export_f3j.tpl";
				break;
		}
	
		# Get the export content
		$content_template = find_template($template);
		$content = $smarty->fetch($content_template);		
		
		return $content;

	}

}

?>