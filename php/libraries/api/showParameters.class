<?php
############################################################################
#	showParameters.class
#
#	Tim Traver
#	3/21/2017
#	class to extend API class to show an API's parameter list
#
############################################################################
#
include_library('event.class');

class showParameters {
	public $function_name;
	public $name;
	public $api;
	public $function_parameters = array();
	
	public function __construct($api){
		$this->api = $api;
		$this->set_function_parameters();
	}
	
	public function set_function_parameters(){
		# This is where we set the parameter field list
		$this->api->function_parameters = array(
			array( "type" => "string",	"mandatory" => 1,	"name" => "function_name",		"description" => "Name of Function to retrieve parameters" )
		);
		$this->api->function_output_modes = "CSV, JSON, XML";
		$this->api->function_output_parameters = array(
			array( "level" => 1,	"type" => "string",		"name" => "function_name",			"description" => "Function Name" ),
			array( "level" => 1,	"type" => "ARRAY",		"name" => "input_fields",			"description" => "Input Fields List" ),
			array( "level" => 2,	"type" => "string",		"name" => "field_name",				"description" => "Input Field Name" ),
			array( "level" => 2,	"type" => "string",		"name" => "field_type",				"description" => "Input Field Type" ),
			array( "level" => 2,	"type" => "string",		"name" => "description",			"description" => "Input Field Description" ),
			array( "level" => 2,	"type" => "boolean",	"name" => "mandatory",				"description" => "Input Field Mandatory Status ( 1 = Mandatory, 0 = not )" ),
			array( "level" => 1,	"type" => "ARRAY",		"name" => "output_fields",			"description" => "Output Fields List" ),
			array( "level" => 2,	"type" => "string",		"name" => "field_name",				"description" => "Output Field Name" ),
			array( "level" => 2,	"type" => "string",		"name" => "field_type",				"description" => "Output Field Type" ),
			array( "level" => 2,	"type" => "string",		"name" => "description",			"description" => "Output Field Description" ),
		);
		$this->api->function_output_description = 
			"List of the input parameters for the function, one per line.";
		$this->api->function_output_description = 
			"Standard Output :\nList of the input parameters for the function, one per line.\n\n";
		$this->api->function_output_description .= "XML or JSON Object Hierarchy:
<result>
  <response_code>1</response_code>
  <error_string></error_string>
  <function_name>searchEvents</function_name>
  <input_fields>
    <field_name>string</field_name>
    <field_type>string</field_type>
    <description><![CDATA[Search String]]></description>
    <mandatory>0</mandatory>
  </input_fields>
  <output_fields>
    <field_name>event_type_code</field_name>
    <field_type>string</field_type>
    <description><![CDATA[Event Type Code (f3f,f3b,f3j,f3k, etc)]]></description>
  </output_fields>
</result>";
	}

	public function process_request(){
		
		# This is the method where we process the request
		$this->function_name = $this->api->input_variables['function_name'];

		if(!file_exists($GLOBALS['include_paths']['libraries']."/api/{$this->function_name}.class")){
			$this->error_code = 1;
			$this->error_string = "Function not available.";
			return "";
		}
		include_library("api/{$this->function_name}.class");
		
		eval("\$name = new {$this->function_name}(\$this);");

		$fields = array();
		$content = '';
		$content .= "Possible input fields for {$this->function_name} are as follows. * fields are mandatory.\n";
		foreach( $name->api->function_parameters as $field ){
			if( $field['mandatory'] == 1 ){
				$content .= ' * ';
			}
			$content .= $field['name'];
			$content .= " - " . $field['type'];
			$content .= " - " . $field['description'] . "\n";
			$fields[] = array( "field_name" => $field['name'], "field_type" => $field['type'], "description" => $field['description'], "mandatory" => $field['mandatory'] );
		}
		$content .= "Output fields for {$this->function_name} are as follows.\n";
		foreach( $name->api->function_output_parameters as $field ){
			$content .= $field['name'];
			$content .= " - " . $field['type'];
			$content .= " - " . $field['description'] . "\n";
			$output_fields[] = array( "field_name" => $field['name'], "field_type" => $field['type'], "description" => $field['description'] );
		}
		$this->api->api_add_output_variable( "function_name", $this->function_name );
		$this->api->api_add_output_variable( "input_fields", $fields );
		$this->api->api_add_output_variable( "output_fields", $output_fields );
		
		return $content;
	}

}

?>