<?php
############################################################################
#	checkUser.class
#
#	Tim Traver
#	03/28/2020
#	class to extend API class to check a user login and return contents
#
############################################################################
#

class checkUser {
	public $api;
	public $login;
	public $password;
	
	public function __construct( $api ){
		$this->api = $api;
		$this->set_function_parameters();
	}
	
	public function set_function_parameters(){
		# This is where we set the mandatory fields
		$this->api->function_parameters = array(
			array("type" => "string", 	"mandatory" => 1,	"name" => "login",			"description" => "User Login" ),
			array("type" => "string", 	"mandatory" => 1,	"name" => "password",		"description" => "User Password" ),
		);
		$this->api->function_output_modes = "CSV, JSON, XML";
		$this->api->function_output_description = "Standard Output :\nEvent ID\n\n";
		$this->api->function_output_parameters = array(
			array( "level" => 0,	"type" => "array",		"name" => "user",				"description" => "Main User Array" ),
			array( "level" => 1,	"type" => "integer",	"name" => "user_id",			"description" => "User ID" ),
			array( "level" => 1,	"type" => "string",		"name" => "user_name",			"description" => "User Name" ),
			array( "level" => 1,	"type" => "string",		"name" => "user_first_name",	"description" => "User First Name" ),
			array( "level" => 1,	"type" => "string",		"name" => "user_last_name",		"description" => "User Last Name" ),
			array( "level" => 1,	"type" => "integer",	"name" => "pilot_id",			"description" => "Pilot ID" ),
			array( "level" => 1,	"type" => "string",		"name" => "pilot_first_name",	"description" => "Pilot First Name" ),
			array( "level" => 1,	"type" => "string",		"name" => "pilot_last_name",	"description" => "Pilot Last Name" ),
			array( "level" => 1,	"type" => "string",		"name" => "pilot_ama",			"description" => "Pilot AMA Number" ),
			array( "level" => 1,	"type" => "string",		"name" => "pilot_fai",			"description" => "Pilot FAI Designation" ),
			array( "level" => 1,	"type" => "string",		"name" => "pilot_fai_license",	"description" => "Pilot FAI License Number" ),
			array( "level" => 1,	"type" => "string",		"name" => "pilot_city",			"description" => "Pilot City" ),
			array( "level" => 1,	"type" => "string",		"name" => "state_code",			"description" => "Pilot State Code" ),
			array( "level" => 1,	"type" => "string",		"name" => "country_code",		"description" => "Pilot Country Code" ),
		);
		$this->api->function_output_description .= "XML or JSON Object Hierarchy :
<result>
  <response_code>1</response_code>
  <error_string></error_string>
  <user>
    <user_id>2</user_id>
    <user_name>tt</user_name>
    <user_first_name>Tim</user_first_name>
    <user_last_name>Traver</user_last_name>
    <pilot_id>1</pilot_id>
    <pilot_first_name>Tim</pilot_first_name>
    <pilot_last_name>Traver</pilot_last_name>
    <pilot_ama>9595</pilot_ama>
    <pilot_fai>USA9595</pilot_fai>
    <pilot_fai_license></pilot_fai_license>
    <pilot_city>Vista</pilot_city>
    <state_code>CA</state_code>
    <country_code>US</country_code>
  </user>
</result>";
	}

	public function process_request(){
		global $smarty;
		
		# This is the method where we process the request
		$this->login = $this->api->input_variables['login'];
		$this->password = $this->api->input_variables['password'];
		$content = "";

		$sha1_pass = sha1( $this->password );
	
	    # Let's get the user info to check the pass
	    $stmt = db_prep("
	        SELECT *
	        FROM user u
	        WHERE u.user_name = :login
	        	OR u.user_email = :login2
	    ");
	    $result = db_exec( $stmt, array( "login" => $this->login,"login2" => $this->login ) );
	    if( isset( $result[0] ) ){
	        $user = $result[0];
	        if( $user['user_status'] == 0 ){
				$this->api->error_code = 2;
				$this->api->error_string = "User does not exist.\n";
				return "";
	        }
	        if( $sha1_pass != $user['user_pass'] ){
				$this->api->error_code = 2;
				$this->api->error_string = "User password is not correct.\n";
				return "";
	        }
	    }else{
			$this->api->error_code = 2;
			$this->api->error_string = "User does not exist.\n";
			return "";
	    }
		
		# now get the full user info
		$user_info = get_user_info( $user['user_id'] );

		$return_user_array = array(
			"user_id" => $user_info['user_id'],
			"user_name" => $user_info['user_name'],
			"user_first_name" => $user_info['user_first_name'],
			"user_last_name" => $user_info['user_last_name'],
			"pilot_id" => $user_info['pilot_id'],
			"pilot_first_name" => $user_info['pilot_first_name'],
			"pilot_last_name" => $user_info['pilot_last_name'],
			"pilot_ama" => $user_info['pilot_ama'],
			"pilot_fai" => $user_info['pilot_fai'],
			"pilot_fai_license" => $user_info['pilot_fai_license'],
			"pilot_city" => $user_info['pilot_city'],
			"state_code" => $user_info['state_code'],
			"country_code" => $user_info['country_code'],
		);
		$this->api->api_add_output_variable( "user", $return_user_array );
		$content = "{$user['user_id']}\n";
		
		# Get the export content
		return $content;
	}

}

?>