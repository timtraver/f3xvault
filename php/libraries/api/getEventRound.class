<?php
############################################################################
#	getEventRound.class
#
#	Tim Traver
#	2/4/2018
#	class to extend API class to get flight info for a particular round
#
############################################################################
#
include_library('event.class');

class getEventRound {
	public $event_id;
	public $api;
	public $round;
	
	public function __construct($api){
		$this->api = $api;
		$this->set_function_parameters();
	}
	
	public function set_function_parameters(){
		# This is where we set the mandatory fields
		$this->api->function_parameters = array(
			array( "type" => "integer",	"mandatory" => 1,	"name" => "event_id",		"description" => "Event ID" ),
			array( "type" => "integer",	"mandatory" => 1,	"name" => "round_number",	"description" => "Round Number" )			
		);
			
		$this->api->function_output_modes = "CSV, JSON, XML";
		$this->api->function_output_parameters = array(
			array( "level" => 1,	"type" => "ARRAY",		"name" => "flights",					"description" => "Pilot Preliminary Flight List" ),
			array( "level" => 2,	"type" => "integer",	"name" => "pilot_id",					"description" => "Pilot ID" ),
			array( "level" => 2,	"type" => "integer",	"name" => "rank",						"description" => "Pilot Round Rank" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_first_name",			"description" => "Pilot First Name" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_last_name",			"description" => "Pilot Last Name" ),
			array( "level" => 2,	"type" => "string",		"name" => "group",						"description" => "Flight Group" ),
			array( "level" => 2,	"type" => "integer",	"name" => "order",						"description" => "Flight Order" ),
			array( "level" => 2,	"type" => "integer",	"name" => "minutes",					"description" => "Flight Time Total Minutes" ),
			array( "level" => 2,	"type" => "string",		"name" => "seconds",					"description" => "Flight Time Seconds" ),
			array( "level" => 2,	"type" => "integer",	"name" => "laps",						"description" => "Flight Number of Laps" ),
			array( "level" => 2,	"type" => "integer",	"name" => "landing",					"description" => "Flight Landing Score" ),
			array( "level" => 2,	"type" => "float",		"name" => "score",						"description" => "Flight Score" ),
			array( "level" => 2,	"type" => "integer",	"name" => "penalty",					"description" => "Flight Penalty" ),
			array( "level" => 2,	"type" => "boolean",	"name" => "dropped",					"description" => "Flight Dropped Status (0 = no, 1 = yes)" ),
			array( "level" => 2,	"type" => "boolean",	"name" => "score_status",				"description" => "Flight Score Status (0 = not scored, 1 = scored)" ),
			array( "level" => 2,	"type" => "ARRAY",		"name" => "subs",						"description" => "Flight Sub Flights List" ),
			array( "level" => 3,	"type" => "integer",	"name" => "sub_num",					"description" => "Flight Sub Number" ),
			array( "level" => 3,	"type" => "string",		"name" => "sub_val",					"description" => "Flight Sub Value" ),
		);
		$this->api->function_output_description = "Standard Output :\nOne Per line of the following\nPilot ID, Pilot First Name, Pilot Last Name, Round Flight Info \n\nFor F3F, each round has the following Flight Info fields (Group, Flight Order, Total Flight Seconds, Penalty) including draw information.\n\nFor F3F Plus, each round has the following Flight Info fields (Group, Flight Order, Climb Out, Sub1, Sub2, Sub3. Sub4, Sub5, Sub6, Sub7, Sub8, Sub9, Sub10, Total Flight Seconds, Penalty, Wind Speed Avg, Wind Dir Avg) including draw information.\n\nFor F3K, each round has the following Flight Info fields (Group, Total Flight Seconds, Penalty) including draws.\n\n";

		$this->api->function_output_description .= "XML or JSON Object Hierarchy (f3f and f3 plus):
<result>
  <response_code>1</response_code>
  <error_string></error_string>
  <flights>
        <pilot_id>1872</pilot_id>
        <rank>1</rank>
        <pilot_first_name>Marc</pilot_first_name>
        <pilot_last_name>Maher</pilot_last_name>
        <country_code></country_code>
        <pilot_bib></pilot_bib>
        <group>A</group>
        <order>0</order>
        <minutes>9</minutes>
        <seconds>55.0</seconds>
        <laps>0</laps>
        <landing>0</landing>
        <penalty>0</penalty>
        <dropped>0</dropped>
        <score_status>1</score_status>
        <wind_speed_avg></wind_speed_avg>
        <wind_dir_avg></wind_dir_avg>
        <subs>
            <sub_num>1</sub_num>
            <sub_val>0:55.5</sub_val>
        </subs>
        <subs>
            <sub_num>2</sub_num>
            <sub_val>2:00.0</sub_val>
        </subs>
  </flights>
</result>
";
	}

	public function process_request(){
		global $smarty;
		
		# This is the method where we process the request
		$this->event_id = $this->api->input_variables['event_id'];
		start_smarty();

		$event = new Event($this->event_id);
		$event->get_pilots();
		if(! $event->info['event_id']){
			$this->api->error_code = 3;
			$this->api->error_string = "Invalid Event ID.\n";
			return "";
		}
		$event->get_draws();
		$_REQUEST['sort_by'] = 'flight_order';
		$event->get_rounds();

		$smarty->assign("event",$event);
		$smarty->assign("fs",$this->api->field_separator);

		$this->rounds = array();

		#Let's first fill it up with the current round info
		foreach($event->rounds as $round_number => $r){
			foreach($r['flights'] as $flight_type_id => $f){
				if( $flight_type_id != $r['flight_type_id'] ){
					continue;
				}
				foreach($f['pilots'] as $event_pilot_id => $p){
					$p['event_round_flyoff'] = $r['event_round_flyoff'];
					$this->rounds[$event_pilot_id][$round_number] = $p;
					$this->rounds[$event_pilot_id][$round_number]['pilot_id'] = $event->pilots[$event_pilot_id]['pilot_id'];
					$this->rounds[$event_pilot_id][$round_number]['pilot_first_name'] = $event->pilots[$event_pilot_id]['pilot_first_name'];
					$this->rounds[$event_pilot_id][$round_number]['pilot_last_name'] = $event->pilots[$event_pilot_id]['pilot_last_name'];
				}
			}
		}

		# Now lets step through the draws to fill out the rest of the rounds if any
		foreach($event->draws as $draw_id => $d){
			if($d['event_draw_active'] == 0){
				continue;
			}
			foreach($d['flights'] as $flight_type_id => $f){
				foreach($f as $round_number => $r){
					foreach($r['pilots'] as $event_pilot_id => $p){
						if(!isset($this->rounds[$event_pilot_id][$round_number])){
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_id'] = $p['event_pilot_id'];
							$this->rounds[$event_pilot_id][$round_number]['pilot_id'] = $event->pilots[$event_pilot_id]['pilot_id'];
							$this->rounds[$event_pilot_id][$round_number]['pilot_first_name'] = $event->pilots[$event_pilot_id]['pilot_first_name'];
							$this->rounds[$event_pilot_id][$round_number]['pilot_last_name'] = $event->pilots[$event_pilot_id]['pilot_last_name'];
							$this->rounds[$event_pilot_id][$round_number]['event_round_id'] = $p['event_round_id'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_group'] = $p['event_draw_round_group'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_order'] = $p['event_draw_round_order'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_penalty'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_minutes'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_seconds'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_laps'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_landing'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_seconds'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_round_flyoff'] = $r['event_round_flyoff'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_total_score'] = floatval( $p['event_pilot_round_total_score'] );
						}
					}
				}
			}
		}

		# Now lets sort the round before we send it
		$round_number = $this->api->input_variables['round_number'];
		foreach( $this->rounds as $event_pilot_id => $p ){
			foreach( $p as $rnumber => $r ){
				if( $rnumber == $round_number ){
					$rounds[] = array(
						"event_pilot_id" => $r['event_pilot_id'],
						"event_pilot_round_flight_group" => $r['event_pilot_round_flight_group'],
						"event_pilot_round_flight_order" => $r['event_pilot_round_flight_order'],
						"event_pilot_round_flight_rank" => $r['event_pilot_round_flight_rank'],
					);
				}
			}
		}

		$rounds = array_msort( $rounds, array('event_pilot_round_flight_group' => SORT_ASC, 'event_pilot_round_flight_rank' => SORT_ASC, 'event_pilot_round_flight_order' => SORT_ASC ) );
		$final_round = array();
		foreach( $rounds as $r ){
			$event_pilot_id = $r['event_pilot_id'];
			$final_rounds[$event_pilot_id][$round_number] = $this->rounds[$event_pilot_id][$round_number];
		}

		$smarty->assign("rounds",$final_rounds);
		$smarty->assign("round_number",$this->api->input_variables['round_number']);

		$template = '';
		$flights = array();
		switch($event->info['event_type_code']){
			case "f3b":
				$template = "api/event_export_round_not_yet.tpl";
				break;
			case "f3b_speed":
				$template = "api/event_export_round_not_yet.tpl";
				break;
			case "f3f":
				$template = "api/event_export_f3f_round.tpl";
				break;
			case "f3f_plus":
				$template = "api/event_export_f3f_plus_round.tpl";
				break;
			case "f3k":
				$template = "api/event_export_f3k_round.tpl";
				break;
			case "f3j":
				$template = "api/event_export_round_not_yet.tpl";
				break;
			case "td":
				$template = "api/event_export_round_not_yet.tpl";
				break;
		}

		# Ok, now get the final flights for export
		foreach( $final_rounds as $event_pilot_id => $round ){
			foreach( $round as $round_number => $r ){
				$subs = array();
				if( isset( $r['sub'] ) ){
					foreach( $r['sub'] as $s ){
						$subs[] = array( "sub_num" => $s['event_pilot_round_flight_sub_num'], "sub_val" => $s['event_pilot_round_flight_sub_val']);
					}
				}
				$flights[] = array(
					"pilot_id" => intval( $r['pilot_id'] ),
					"rank" => intval( $r['event_pilot_round_flight_rank'] ),
					"pilot_first_name" => $r['pilot_first_name'],
					"pilot_last_name" => $r['pilot_last_name'],
					"country_code" => $event->pilots[ $p['event_pilot_id'] ]['country_code'],
					"pilot_bib" => $event->pilots[ $p['event_pilot_id'] ]['event_pilot_bib'],
					"group" => "{$r['event_pilot_round_flight_group']}",
					"order" => intval( $r['event_pilot_round_flight_order'] ),
					"minutes" => intval( $r['event_pilot_round_flight_minutes'] ),
					"seconds" => "{$r['event_pilot_round_flight_seconds']}",
					"laps" => intval( $r['event_pilot_round_flight_laps'] ),
					"landing" => intval( $r['event_pilot_round_flight_landing'] ),
					"penalty" => intval( $r['event_pilot_round_flight_penalty'] ),
					"dropped" => $r['event_pilot_round_flight_dropped'] ? 1 : 0,
					"score_status" => $r['event_pilot_round_flight_status'] ? 1 : 0,
					"wind_speed_avg" => $r['event_pilot_round_flight_wind_avg'],
					"wind_dir_avg" => $r['event_pilot_round_flight_dir_avg'],
					"subs" => $subs
				);
			}
		}

		$this->api->api_add_output_variable( "flights", $flights );
	
		# Get the export content
		$content_template = find_template($template);
		$content = $smarty->fetch($content_template);		
		
		return $content;

	}

}

?>