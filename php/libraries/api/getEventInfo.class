<?php
############################################################################
#	getEventInfo.class
#
#	Tim Traver
#	3/12/2017
#	class to extend API class to get a event info
#
############################################################################
#
include_library('event.class');

class getEventInfo {
	public $event_id;
	public $api;
	public $rounds;
	
	public function __construct($api){
		$this->api = $api;
		$this->set_function_parameters();
	}
	
	public function set_function_parameters(){
		# This is where we set the mandatory fields
		$this->api->function_parameters = array(
			array("type" => "integer", 	"mandatory" => 1,	"name" => "event_id",			"description" => "Event ID" ),
		);
		$this->api->function_output_modes = "CSV, JSON, XML";
		$this->api->function_output_description = "Standard Output :\nEvent ID, Event Name, Event_location, Event Start Date, Event End Date, Event Type, Number of Rounds\nOne Per line of the following\nPilot ID, Pilot Bib, Pilot First Name, Pilot Last Name, Class, AMA, FAI, FAI License, Team Name, Rounds (Group or flight order for each round if a round or draw exists)\n\nFor F3F, each round has the following fields (Group, Flight Order, Flight Seconds, Penalty) for as many rounds as there are including draws.\nFor F3K, each round has the following fields (Group, Flight Seconds, Penalty) for as many rounds as there are including draws.\n\n";
		$this->api->function_output_parameters = array(
			array( "level" => 0,	"type" => "ARRAY",		"name" => "event",						"description" => "Main Event Array" ),
			array( "level" => 1,	"type" => "integer",	"name" => "event_id",					"description" => "Event ID" ),
			array( "level" => 1,	"type" => "string",		"name" => "event_name",					"description" => "Event Name" ),
			array( "level" => 1,	"type" => "string",		"name" => "location_name",				"description" => "Location Name" ),
			array( "level" => 1,	"type" => "string",		"name" => "country_code",				"description" => "Event Country Code" ),
			array( "level" => 1,	"type" => "string",		"name" => "start_date",					"description" => "Event Start Date" ),
			array( "level" => 1,	"type" => "string",		"name" => "end_date",					"description" => "Event End Date" ),
			array( "level" => 1,	"type" => "string",		"name" => "event_type",					"description" => "Event Type Description" ),
			array( "level" => 1,	"type" => "string",		"name" => "event_type_code",			"description" => "Event Type Code" ),
			array( "level" => 1,	"type" => "integer",	"name" => "total_rounds",				"description" => "Event Total Rounds" ),
			array( "level" => 1,	"type" => "string",		"name" => "event_calc_accuracy_string",	"description" => "Calculation Accuracy String" ),

			array( "level" => 1,	"type" => "ARRAY",		"name" => "tasks",						"description" => "List Of Tasks" ),
			array( "level" => 2,	"type" => "integer",	"name" => "round_number",				"description" => "Task Round Number" ),
			array( "level" => 2,	"type" => "string",		"name" => "task_code",					"description" => "Task Flight Type Code" ),
			array( "level" => 2,	"type" => "string",		"name" => "flight_type_name",			"description" => "Task Flight Type Name" ),
			array( "level" => 2,	"type" => "string",		"name" => "flight_type_name_short",		"description" => "Task Flight Type Name (short version)" ),
			array( "level" => 2,	"type" => "string",		"name" => "flight_type_description",	"description" => "Task Flight Type Full Description" ),
			array( "level" => 2,	"type" => "boolean",	"name" => "flight_type_landing",		"description" => "Task Flight Type Landing Status ( 0 = no, 1 = yes )" ),
			array( "level" => 2,	"type" => "boolean",	"name" => "flight_type_laps",			"description" => "Task Flight Type Has Laps Status ( 0 = no, 1 = yes )" ),
			array( "level" => 2,	"type" => "boolean",	"name" => "flight_type_over_penalty",	"description" => "Task Flight Type Has Overage Penalty ( 0 = no, 1 = yes )" ),
			array( "level" => 2,	"type" => "integer",	"name" => "flight_type_sub_flights",	"description" => "Task Flight Type Number of Sub Flights" ),
			array( "level" => 2,	"type" => "boolean",	"name" => "flight_type_start_penalty",	"description" => "Task Flight Type Has Start Penalty ( 0 = no, 1 = yes )" ),

			array( "level" => 1,	"type" => "ARRAY",		"name" => "pilots",						"description" => "List Of Pilots" ),
			array( "level" => 2,	"type" => "integer",	"name" => "pilot_id",					"description" => "Pilot ID" ),
			array( "level" => 2,	"type" => "integer",	"name" => "pilot_position",				"description" => "Pilot Preliminary Event Position" ),
			array( "level" => 2,	"type" => "integer",	"name" => "pilot_bib",					"description" => "Pilot Bib Number" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_first_name",			"description" => "Pilot First Name" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_last_name",			"description" => "Pilot Last Name" ),
			array( "level" => 2,	"type" => "string",		"name" => "country_code",				"description" => "Pilot Country Code" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_class",				"description" => "Pilot Class" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_ama",					"description" => "Pilot AMA Number" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_fai",					"description" => "Pilot FAI Designtaion" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_fai_license",			"description" => "Pilot FAI License Number" ),
			array( "level" => 2,	"type" => "string",		"name" => "pilot_team",					"description" => "Pilot Team" ),
			array( "level" => 2,	"type" => "float",		"name" => "total_score",				"description" => "Pilot Total Score" ),
			array( "level" => 2,	"type" => "float",		"name" => "percentage",					"description" => "Pilot Percentage of Top Score" ),
			array( "level" => 2,	"type" => "float",		"name" => "drop",						"description" => "Pilot Dropped Score" ),
			array( "level" => 2,	"type" => "float",		"name" => "diff",						"description" => "Pilot Difference From Above Pilot" ),

			array( "level" => 1,	"type" => "ARRAY",		"name" => "flyoffs",					"description" => "List Of Flyoff Rounds and Standings" ),
			array( "level" => 2,	"type" => "integer",	"name" => "flyoff_number",				"description" => "Flyoff Number" ),
			array( "level" => 2,	"type" => "integer",	"name" => "total_rounds",				"description" => "Flyoff Number Rounds" ),

			array( "level" => 2,	"type" => "ARRAY",		"name" => "pilots",						"description" => "List Of Pilots" ),
			array( "level" => 3,	"type" => "integer",	"name" => "pilot_id",					"description" => "Pilot ID" ),
			array( "level" => 3,	"type" => "integer",	"name" => "pilot_position",				"description" => "Pilot Preliminary Event Position" ),
			array( "level" => 3,	"type" => "integer",	"name" => "pilot_bib",					"description" => "Pilot Bib Number" ),
			array( "level" => 3,	"type" => "string",		"name" => "pilot_first_name",			"description" => "Pilot First Name" ),
			array( "level" => 3,	"type" => "string",		"name" => "pilot_last_name",			"description" => "Pilot Last Name" ),
			array( "level" => 3,	"type" => "string",		"name" => "country_code",				"description" => "Pilot Country Code" ),
			array( "level" => 3,	"type" => "string",		"name" => "pilot_class",				"description" => "Pilot Class" ),
			array( "level" => 3,	"type" => "string",		"name" => "pilot_ama",					"description" => "Pilot AMA Number" ),
			array( "level" => 3,	"type" => "string",		"name" => "pilot_fai",					"description" => "Pilot FAI Designtaion" ),
			array( "level" => 3,	"type" => "string",		"name" => "pilot_fai_license",			"description" => "Pilot FAI License Number" ),
			array( "level" => 3,	"type" => "string",		"name" => "pilot_team",					"description" => "Pilot Team" ),
			array( "level" => 3,	"type" => "float",		"name" => "total_score",				"description" => "Pilot Total Score" ),
			array( "level" => 3,	"type" => "float",		"name" => "percentage",					"description" => "Pilot Percentage of Top Score" ),
			array( "level" => 3,	"type" => "float",		"name" => "drop",						"description" => "Pilot Dropped Score" ),
			array( "level" => 3,	"type" => "float",		"name" => "diff",						"description" => "Pilot Difference From Above Pilot" ),
		);
		$this->api->function_output_description .= "
XML or JSON Object Hierarchy :
<result>
  <response_code>1</response_code>
  <error_string></error_string>
  <event>
    <event_id></event_id>
    <event_name><![CDATA[El Dorado Cookie Toss - November 2018]]></event_name>
    <location_name><![CDATA[El Dorado Regional Park]]></location_name>
    <country_code>US</country_code>
    <start_date><![CDATA[11/03/2018]]></start_date>
    <end_date><![CDATA[11/03/2018]]></end_date>
    <event_type></event_type>
    <total_rounds>6</total_rounds>
    <event_calc_accuracy_string>%.2f</event_calc_accuracy_string>
    <tasks>
      <round_number>1</round_number>
      <task_code>f3k_a</task_code>
    </tasks>
    <tasks>
      ...
    </tasks>
    <pilots>
        <pilot_id>1</pilot_id>
        <pilot_position>2</pilot_position>
        <pilot_bib>1</pilot_bib>
        <pilot_first_name>Tim</pilot_first_name>
        <pilot_last_name>Traver</pilot_last_name>
        <country_code>US</country_code>
        <pilot_class></pilot_class>
        <pilot_ama>9595</pilot_ama>
        <pilot_fai>USA9595</pilot_fai>
        <pilot_fai_license></pilot_fai_license>
        <pilot_team></pilot_team>
        <total_score>9598.21</total_score>
        <percentage>98.963</percentage>
        <drop>98.963</drop>
        <diff>-100.58</diff>
	</pilots>
    <pilots>
      ...
    </pilots>
    <flyoffs>
        <flyoff_number>1</flyoff_number>
        <total_rounds>4</total_rounds>
        <pilots>
            <pilot_id>428</pilot_id>
            <pilot_position>1</pilot_position>
            <pilot_bib>64</pilot_bib>
            <pilot_first_name>
                <![CDATA[Roland ]]>
            </pilot_first_name>
            <pilot_last_name>Sommer</pilot_last_name>
            <country_code>DE</country_code>
            <pilot_class>Open</pilot_class>
            <pilot_ama></pilot_ama>
            <pilot_fai>GER</pilot_fai>
            <pilot_fai_license>1586</pilot_fai_license>
            <pilot_team></pilot_team>
            <total_score>13474</total_score>
            <percentage>100</percentage>
            <drop></drop>
            <diff>0</diff>
        </pilots>
    </flyoffs>

</result>";
		
		
		
	}

	public function process_request(){
		global $smarty;
		
		# This is the method where we process the request
		$this->event_id = $this->api->input_variables['event_id'];
		start_smarty();

		$event = new Event($this->event_id);
		if(! $event->info['event_id']){
			$this->api->error_code = 3;
			$this->api->error_string = "Invalid Event ID.\n";
			return "";
		}
		$event->get_draws();
		$event->get_rounds();

		$smarty->assign("event",$event);
		$smarty->assign("fs",$this->api->field_separator);
				
		$this->rounds = array();
		$total_rounds = 0;
		
		#Let's first fill it up with the current round info
		foreach($event->rounds as $round_number => $r){
			foreach($r['flights'] as $flight_type_id => $f){
				if( $flight_type_id != $r['flight_type_id'] ){
					continue;
				}
				foreach($f['pilots'] as $event_pilot_id => $p){
					$p['event_round_flyoff'] = $r['event_round_flyoff'];
					$this->rounds[$event_pilot_id][$round_number] = $p;
				}
			}
			if( ! $r['event_round_flyoff'] ){
				$total_rounds++;
			}
		}
		# Now lets step through the draws to fill out the rest of the rounds if any
		foreach($event->draws as $draw_id => $d){
			if($d['event_draw_active'] == 0){
				continue;
			}
			foreach($d['flights'] as $flight_type_id => $f){
				foreach($f as $round_number => $r){
					foreach($r['pilots'] as $event_pilot_id => $p){
						if(!isset($this->rounds[$event_pilot_id][$round_number])){
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_id'] = $p['event_pilot_id'];
							$this->rounds[$event_pilot_id][$round_number]['event_round_id'] = $p['event_round_id'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_group'] = $p['event_draw_round_group'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_order'] = $p['event_draw_round_order'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_penalty'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_minutes'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_seconds'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_round_flyoff'] = $r['event_round_flyoff'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_total_score'] = floatval( $p['event_pilot_round_total_score'] );
						}
					}
				}
			}
		}
		
		if($total_rounds == 0 && isset($event->tasks)){
			$total_rounds = count($event->tasks);
		}
		$smarty->assign("total_rounds",$total_rounds);
		$smarty->assign("rounds",$this->rounds);

		$template = '';
		switch($event->info['event_type_code']){
			case "f3b":
				$template = "api/event_export_f3b.tpl";
				break;
			case "f3b_speed":
				$template = "api/event_export_f3b.tpl";
				break;
			case "f3f":
			case "f3f_plus":
				$template = "api/event_export_f3f.tpl";
				break;
			case "f3k":
				$template = "api/event_export_f3k.tpl";
				break;
			case "f3j":
				$template = "api/event_export_f3j.tpl";
				break;
			case "td":
				$template = "api/event_export_f3j.tpl";
				break;
		}

		$pilots = array();
		$temp_tasks = array();
		$tasks = array();
		# Figure out the tasks from the existing rounds and then the tasks set up in the event

		foreach( $event->rounds as $round_number => $round ){
			$ft = $round['flight_type_id'];
			$temp_tasks[ $round_number ] = array(
				"round_number" => $round_number,
				"task_code" => $round['flights'][ $ft ]['flight_type_code'],
				"flight_type_name" => $round['flights'][ $ft ]['flight_type_name'],
				"flight_type_name_short" => $round['flights'][ $ft ]['flight_type_name_short'],
				"flight_type_description" => $round['flights'][ $ft ]['flight_type_description'],
				"flight_type_laps" => $round['flights'][ $ft ]['flight_type_laps'],
				"flight_type_landing" => $round['flights'][ $ft ]['flight_type_landing'],
				"flight_type_over_penalty" => $round['flights'][ $ft ]['flight_type_over_penalty'],
				"flight_type_sub_flights" => $round['flights'][ $ft ]['flight_type_sub_flights'],
				"flight_type_start_penalty" => $round['flights'][ $ft ]['flight_type_start_penalty'],
			);
		}

		# Now lets fill in the rest of the types if they haven't been run already
		if( count( $event->tasks ) > 0 ){
			foreach( $event->tasks as $i => $t ){
				if( isset( $temp_tasks[ $i ] ) ){
					continue;
				}
				$temp_tasks[ $i ] = array(
					"round_number" => $i,
					"task_code" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_code'],
					"flight_type_name" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_name'],
					"flight_type_name_short" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_name_short'],
					"flight_type_description" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_description'],
					"flight_type_laps" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_laps'],
					"flight_type_landing" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_landing'],
					"flight_type_over_penalty" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_over_penalty'],
					"flight_type_sub_flights" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_sub_flights'],
					"flight_type_start_penalty" => $event->flight_types[ $t['flight_type_id'] ]['flight_type_start_penalty'],
				);
			}
		}
		foreach( $temp_tasks as $t ){
			$tasks[] = $t;
		}
		
		$event->calculate_event_totals();
		$score = 0;
		$diff = 0;
		foreach( $event->totals['pilots'] as $p ){
			if( $score == 0 ){
				$score = $p['total'];
			}
			$diff = $p['total'] - $score;
			$pilots[] = array(
				"pilot_id" => $event->pilots[ $p['event_pilot_id'] ]['pilot_id'],
				"pilot_position" => $p['overall_rank'],
				"pilot_bib" => $event->pilots[ $p['event_pilot_id'] ]['event_pilot_bib'],
				"pilot_first_name" => $p['pilot_first_name'],
				"pilot_last_name" => $p['pilot_last_name'],
				"country_code" => $event->pilots[ $p['event_pilot_id'] ]['country_code'],
				"pilot_class" => $event->pilots[ $p['event_pilot_id'] ]['class_description'],
				"pilot_ama" => $event->pilots[ $p['event_pilot_id'] ]['pilot_ama'],
				"pilot_fai" => $event->pilots[ $p['event_pilot_id'] ]['pilot_fai'],
				"pilot_fai_license" => $event->pilots[ $p['event_pilot_id'] ]['pilot_fai_license'],
				"pilot_team" => $event->pilots[ $p['event_pilot_id'] ]['event_pilot_team'],
				"total_score" => $p['total'],
				"percentage" => $p['event_pilot_total_percentage'],
				"drop" => $p['drop'],
				"diff" => $diff,
			);
			$score = $p['total'];
		}

		# Now lets set the flyoff pilot list too
		$flyoffs = array();
		$score = 0;
		$diff = 0;
		foreach( $event->flyoff_totals as $flyoff_number => $ft ){
			$temp_pilots = array();
			foreach( $ft['pilots'] as $p ){
				if( $score == 0 ){
					$score = $p['total'];
				}
				$diff = $p['total'] - $score;
				$temp_pilots[] = array(
					"pilot_id" => $event->pilots[ $p['event_pilot_id'] ]['pilot_id'],
					"pilot_position" => $p['overall_rank'],
					"pilot_bib" => $event->pilots[ $p['event_pilot_id'] ]['event_pilot_bib'],
					"pilot_first_name" => $p['pilot_first_name'],
					"pilot_last_name" => $p['pilot_last_name'],
					"country_code" => $event->pilots[ $p['event_pilot_id'] ]['country_code'],
					"pilot_class" => $event->pilots[ $p['event_pilot_id'] ]['class_description'],
					"pilot_ama" => $event->pilots[ $p['event_pilot_id'] ]['pilot_ama'],
					"pilot_fai" => $event->pilots[ $p['event_pilot_id'] ]['pilot_fai'],
					"pilot_fai_license" => $event->pilots[ $p['event_pilot_id'] ]['pilot_fai_license'],
					"pilot_team" => $event->pilots[ $p['event_pilot_id'] ]['event_pilot_team'],
					"total_score" => $p['total'],
					"percentage" => $p['event_pilot_total_percentage'],
					"drop" => $p['drop'],
					"diff" => round($diff,2),
				);
				$score = $p['total'];
				
			}
			$flyoffs[ $flyoff_number ]['flyoff_number'] = $flyoff_number;
			$flyoffs[ $flyoff_number ]['total_rounds'] = $ft['total_rounds'];
			$flyoffs[ $flyoff_number ]['pilots'] = $temp_pilots;
		}
		# Convert flyoffs to a simple array instead of associative
		$floyoffs_final = array();
		foreach( $flyoffs as $f ){
			$flyoffs_final[] = $f;
		}
		
		# If the event hasn't had any scores made yet, then lets create the pilot list from the main pilot list
		if( count( $pilots ) == 0 ){
			foreach( $event->pilots as $p ){
				$flights = array();
				$pilots[] = array(
					"pilot_id" => $p['pilot_id'],
					"pilot_position" => 1,
					"pilot_bib" => $p['event_pilot_bib'],
					"pilot_first_name" => $p['pilot_first_name'],
					"pilot_last_name" => $p['pilot_last_name'],
					"country_code" => $p['country_code'],
					"pilot_class" => $p['class_description'],
					"pilot_ama" => $p['pilot_ama'],
					"pilot_fai" => $p['pilot_fai'],
					"pilot_fai_license" => $p['pilot_fai_license'],
					"pilot_team" => $p['event_pilot_team'],
					"total_score" => 0.0,
					"percentage" => 0.0,
					"drop" => 0.0,
					"diff" => 0.0,
					"flights" => $flights
				);
			}
		}

		$e = array(
			"event_id" => $this->event_id,
			"event_name" => $event->info['event_name'],
			"location_name" => $event->info['location_name'],
			"country_code" => $event->info['country_code'],
			"start_date" => date( "m/d/Y", strtotime($event->info['event_start_date'] ) ),
			"end_date" => date( "m/d/Y", strtotime($event->info['event_end_date'] ) ),
			"event_type" => $event->info['event_type_name'],
			"event_type_code" => $event->info['event_type_code'],
			"total_rounds" => $total_rounds,
			"event_calc_accuracy_string" => $event->event_calc_accuracy_string,
			"tasks" => $tasks,
			"pilots" => $pilots,
			"flyoffs" => $flyoffs_final,
		);
		$this->api->api_add_output_variable( "event", $e );

		# Get the export content
		if( $template != '' ){
			$content_template = find_template($template);
			$content = $smarty->fetch($content_template);		
		}else{
			$content = "";
		}
		
		return $content;
	}

}

?>