<?php
############################################################################
#	getEventInfo.class
#
#	Tim Traver
#	3/12/2017
#	class to extend API class to get a event info
#
############################################################################
#
include_library('event.class');

class getEventInfo {
	public $event_id;
	public $api;
	public $rounds;
	
	public function __construct($api){
		$this->api = $api;
		$this->set_function_parameters();
	}
	
	public function set_function_parameters(){
		# This is where we set the mandatory fields
		$this->api->function_parameters = array(
			array("name" => "event_id",	 "type" => "integer", "description" => "Event ID", "mandatory" => 1)
		);
		$this->api->function_output_modes = "CSV, JSON, XML";
		$this->api->function_output_description = "Standard Output :\nEvent ID, Event Name, Event_location, Event Start Date, Event End Date, Event Type, Number of Rounds\nOne Per line of the following\nPilot ID, Pilot Bib, Pilot First Name, Pilot Last Name, Class, AMA, FAI, FAI License, Team Name, Rounds (Group or flight order for each round if a round or draw exists)\n\nFor F3F, each round has the following fields (Group, Flight Order, Flight Seconds, Penalty) for as many rounds as there are including draws.\nFor F3K, each round has the following fields (Group, Flight Seconds, Penalty) for as many rounds as there are including draws.\n\n";
		$this->api->function_output_description .= "
XML or JSON Object Hierarchy :
<result>
  <response_code>1</response_code>
  <error_string></error_string>
  <event>
    <event_id></event_id>
    <event_name><![CDATA[El Dorado Cookie Toss - November 2018]]></event_name>
    <location><![CDATA[El Dorado Regional Park]]></location>
    <start_date><![CDATA[11/03/2018]]></start_date>
    <end_date><![CDATA[11/03/2018]]></end_date>
    <event_type></event_type>
    <rounds>6</rounds>
    <tasks>
      <round_number>1</round_number>
      <task_code>f3k_a</task_code>
    </tasks>
    <tasks>
      ...
    </tasks>
    <pilots>
      <pilot_id>116</pilot_id>
      <pilot_bib>1</pilot_bib>
      <pilot_first_name>Matt</pilot_first_name>
      <pilot_last_name>Nelson</pilot_last_name>
      <pilot_class>Open</pilot_class>
      <pilot_ama>3702</pilot_ama>
      <pilot_fai></pilot_fai>
      <pilot_fai_license></pilot_fai_license>
      <pilot_team></pilot_team>
      <flights>
        <round_number>1</round_number>
        <group>C</group>
        <order>1</order>
        <minutes>3</minutes>
        <seconds>41</seconds>
        <penalty>0</penalty>
        <subs>
          <sub1>28.16</sub1>
          <subX>...</sub>
        </subs>
      </flights>
      <flights>
        ...
      </flights>
    </pilots>
    <pilots>
      ...
    </pilots>
</result>";
		
		
		
	}

	public function process_request(){
		global $smarty;
		
		# This is the method where we process the request
		$this->event_id = $this->api->input_variables['event_id'];
		start_smarty();

		$event = new Event($this->event_id);
		if(! $event->info['event_id']){
			$this->api->error_code = 3;
			$this->api->error_string = "Invalid Event ID.\n";
			return "";
		}
		$event->get_draws();
		$event->get_rounds();

		$smarty->assign("event",$event);
		$smarty->assign("fs",$this->api->field_separator);
				
		$this->rounds = array();
		$total_rounds = 0;
		#Let's first fill it up with the current round info
		foreach($event->rounds as $round_number => $r){
			foreach($r['flights'] as $flight_type_id => $f){
				foreach($f['pilots'] as $event_pilot_id => $p){
					$this->rounds[$event_pilot_id][$round_number] = $p;
				}
			}
			if($round_number > $total_rounds){
				$total_rounds = $round_number;
			}
		}

		# Now lets step through the draws to fill out the rest of the rounds if any
		foreach($event->draws as $draw_id => $d){
			if($d['event_draw_active'] == 0){
				continue;
			}
			foreach($d['flights'] as $flight_type_id => $f){
				foreach($f as $round_number => $r){
					foreach($r['pilots'] as $event_pilot_id => $p){
						if(!isset($this->rounds[$event_pilot_id][$round_number])){
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_id'] = $p['event_pilot_id'];
							$this->rounds[$event_pilot_id][$round_number]['event_round_id'] = $p['event_round_id'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_group'] = $p['event_draw_round_group'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_order'] = $p['event_draw_round_order'];
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_penalty'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_minutes'] = 0;
							$this->rounds[$event_pilot_id][$round_number]['event_pilot_round_flight_seconds'] = 0;
						}
					}
					if($round_number > $total_rounds){
						$total_rounds = $round_number;
					}
				}
			}
		}
		
		if($total_rounds == 0 && isset($event->tasks)){
			$total_rounds = count($event->tasks);
		}
		$smarty->assign("total_rounds",$total_rounds);
		$smarty->assign("rounds",$this->rounds);

		$template = '';
		switch($event->info['event_type_code']){
			case "f3b":
				$template = "api/event_export_f3b.tpl";
				break;
			case "f3b_speed":
				$template = "api/event_export_f3b.tpl";
				break;
			case "f3f":
			case "f3f_plus":
				$template = "api/event_export_f3f.tpl";
				break;
			case "f3k":
				$template = "api/event_export_f3k.tpl";
				break;
			case "f3j":
				$template = "api/event_export_f3j.tpl";
				break;
			case "td":
				$template = "api/event_export_f3j.tpl";
				break;
		}

		$pilots = array();
		$tasks = array();
		if( count( $event->tasks ) > 0 ){
			foreach( $event->tasks as $i => $t ){
				$tasks[] = array( "round_number" => $i, "task_code" => $event->flight_types[$t['flight_type_id']]['flight_type_code'] );
			}
		}
		$event->calculate_event_totals();
		foreach( $event->totals['pilots'] as $p ){
			$pilots[] = array(
				"pilot_id" => $event->pilots[ $p['event_pilot_id'] ]['pilot_id'],
				"event_pilot_position" => $p['overall_rank'],
				"pilot_bib" => $event->pilots[ $p['event_pilot_id'] ]['event_pilot_bib'],
				"pilot_first_name" => $p['pilot_first_name'],
				"pilot_last_name" => $p['pilot_last_name'],
				"country_code" => $event->pilots[ $p['event_pilot_id'] ]['country_code'],
				"pilot_class" => $event->pilots[ $p['event_pilot_id'] ]['class_description'],
				"pilot_ama" => $event->pilots[ $p['event_pilot_id'] ]['pilot_ama'],
				"pilot_fai" => $event->pilots[ $p['event_pilot_id'] ]['pilot_fai'],
				"pilot_fai_license" => $event->pilots[ $p['event_pilot_id'] ]['pilot_fai_license'],
				"pilot_team" => $event->pilots[ $p['event_pilot_id'] ]['event_pilot_team'],
				"event_pilot_total_score" => $p['total'],
				"event_pilot_total_percentage" => $p['event_pilot_total_percentage'],
			);
		}
						
		$e = array(
			"event_id" => $this->event_id,
			"event_name" => $event->info['event_name'],
			"location_name" => $event->info['location_name'],
			"start_date" => date( "m/d/Y", strtotime($event->info['event_start_date'] ) ),
			"end_date" => date( "m/d/Y", strtotime($event->info['event_end_date'] ) ),
			"event_type" => $event->info['event_type_name'],
			"event_type_code" => $event->info['event_type_code'],
			"total_rounds" => $total_rounds,
			"tasks" => $tasks,
			"pilots" => $pilots
		);
		$this->api->api_add_output_variable( "event", $e );

		# Get the export content
		$content_template = find_template($template);
		$content = $smarty->fetch($content_template);		
		
		return $content;
	}

}

?>