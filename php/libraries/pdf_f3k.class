<?php
############################################################################
#       pdf_f3k.class
#
#       Tim Traver
#       1/10/15
#       This is a class to print the pdf pilot recording sheets
#
############################################################################
include_library('fpdf/fpdf.php');

class PDF_F3K {
	# Global class to handle printing of f3k pilot sheet
	public $pdf;
	public $page_margin;
	public $page_cols;
	public $page_rows;
	public $padding;
	public $cell_width;
	public $cell_height;
	public $num_pages;
	public $per_page;
	public $data = array();
	
	public function __construct(){
		# Initialization of the class
		$this->page_margin = 8;
		$this->page_cols = 3;
		$this->page_rows = 2;
		$this->padding = 1;
		$this->per_page = $this->page_cols*$this->page_rows;
		
		$this->pdf = new FPDF('L','mm','Letter');
		$width = $this->pdf->GetPageWidth();
		$height = $this->pdf->GetPageHeight();
		unset($this->pdf);

		$this->cell_width = ($width - ($this->page_cols+1)*$this->page_margin)/$this->page_cols;
		$this->cell_height = ($height - ($this->page_rows+1)*$this->page_margin)/$this->page_rows;
	}
	public function render($data){
		# Main routine to render the pages with the data given
		$num_cells = count($data);
		$num_pages = ceil($num_cells/$this->per_page);
		
		# OK, lets create the pages
		$this->pdf = new FPDF('L','mm','Letter');
		$this->pdf->AddPage();
		$this->pdf->SetFont('Arial','B',16);
		$this->pdf->SetMargins(0,0);
		$this->pdf->SetAutoPageBreak(FALSE);
		
		$x = $this->page_margin;
		$y = $this->page_margin;
		$cell = 1;
		foreach($data as $cell_num=>$d){
			$this->render_cell($x,$y,$d);
			if($cell % $this->page_cols ==0){
				# We need to go to the next line
				$x = $this->page_margin;
				$y = $this->cell_height + $this->page_margin*$this->page_rows;
			}else{
				$x += $this->cell_width + $this->page_margin;
			}
			if($cell % $this->per_page == 0){
				# We need to make a new page and have the x and y reset
				$this->pdf->AddPage();
				$x = $this->page_margin;
				$y = $this->page_margin;
			}
			$cell++;
		}
		return $this->pdf->Output();
	}



	public function render_cell($x,$y,$data){
		# Function to render a single cell of data at x and y location
		# Lets set the XY for the cell
		$current_x = $x;
		$current_y = $y;
		$this->pdf->SetXY($x,$y);
		
		# Outline of the cell
		$this->pdf->Cell($this->cell_width,$this->cell_height,'',1,0,'C',FALSE);
		
		# Event Name header
		$current_x += $this->padding;
		$current_y += $this->padding;
		$inner_cell_width = $this->cell_width - (2*$this->padding);
		$this->pdf->SetFontSize(8);
		$this->pdf->SetFillColor(211,211,211);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell($inner_cell_width,7,$data['event_name'],0,0,'L',TRUE);
		$current_y += 8;
		
		# Round Header
		$this->pdf->SetXY($x + $this->padding,$current_y);
		$this->pdf->SetFillColor(211,211,211);
		$this->pdf->SetFontSize(20);
		$this->pdf->Cell($inner_cell_width,13,"Round {$data['round']}",0,0,'C',TRUE);
		$current_y += 14;
		
		# Pilot Name and Group
		$this->pdf->SetFontSize(10);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell(10,8,'Pilot',0,0,'C',TRUE);
		$current_x += 11;
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->SetFillColor(255,255,255);
		$name_width = $inner_cell_width - 11 - 11 - 12;
		$this->pdf->Cell($name_width,8,$data['pilot'],1,0,'L',TRUE);
		$this->pdf->SetFillColor(211,211,211);
		
		$current_x = $x + $this->padding + $inner_cell_width - 11 - 11;
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell(12,8,'Group',0,0,'C',TRUE);
		
		$current_x = $this->pdf->GetX() + 1;
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->SetFillColor(255,255,255);
		$this->pdf->SetFontSize(18);
		$this->pdf->Cell(9,8,$data['group'],1,0,'C',TRUE);
		
		$current_x = $x + $this->padding;
		$current_y += 9;
		
		# Task Description
		$this->pdf->SetFontSize(8);
		$this->pdf->SetFillColor(211,211,211);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell($inner_cell_width,12,$data['task'],0,0,'C',TRUE);
		
		$current_x = $x + $this->padding;
		$current_y += 13;
		
		# Lets add a space
		$current_y += 3;
		
		# Lets figure out how many boxes to have for flights
		$num_flights = count($data['flights']);
		$max_width = 20;
		
		if((($num_flights*$max_width) + ($num_flights*$this->padding)) > $inner_cell_width){
			# The flight cell widths will be limited by the inner_cell_width
			$flight_cell_width = ($inner_cell_width - ($num_flights*$this->padding)) / $num_flights;
		}else{
			$flight_cell_width = 20;
		}
		$all_flight_width = ($num_flights * $flight_cell_width) + ($num_flights * $this->padding);
		$all_flight_this->padding = ($inner_cell_width - $all_flight_width)/2;
		$start_flight_x = $x + $this->padding + $all_flight_this->padding;
		
		# Flight Labels
		$this->pdf->SetFillColor(255,255,255);
		$this->pdf->SetFontSize(8);
		$current_x = $start_flight_x;
		
		foreach($data['flights'] as $f){
			$this->pdf->SetXY($current_x,$current_y);
			$this->pdf->Cell($flight_cell_width,10,$f['label'],0,0,'C',TRUE);
			$current_x = $this->pdf->GetX() + 1;
		}
		
		# Flight Boxes
		$current_y += 11;
		$current_x = $start_flight_x;
		$this->pdf->SetFontSize(10);
		foreach($data['flights'] as $f){
			$this->pdf->SetXY($current_x,$current_y);
			$content = "";
			if($f['type'] == 'check'){
				$content = "[  ]";
			}
			$this->pdf->Cell($flight_cell_width,11,$content,1,0,'C',TRUE);
			$current_x = $this->pdf->GetX() + 1;
		}
		
		$current_y += 12;
		
		# Lets add a space
		$current_y += 3;
		
		# Lets make quarter cells
		$cell_width = ($inner_cell_width - (4*$this->padding)) / 4;
		
		# Penalty Line
		$current_x = $x + $this->padding;
		$this->pdf->SetFontSize(10);
		$this->pdf->SetFillColor(211,211,211);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell($cell_width,10,'Penalty',0,0,'C',TRUE);
		$current_x = $this->pdf->GetX() + 1;
		$this->pdf->SetFillColor(255,255,255);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell($cell_width,10,'',1,0,'C',TRUE);
		$current_x = $this->pdf->GetX() + 1;
		
		# Signatures
		$current_y += 11;
		$current_x = $x + $this->padding;
		$this->pdf->SetFillColor(211,211,211);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell($cell_width,10,'Pilot Sig',0,0,'C',TRUE);
		$current_x = $this->pdf->GetX() + 1;
		$this->pdf->SetFillColor(255,255,255);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell($cell_width,10,'',1,0,'C',TRUE);
		$current_x = $this->pdf->GetX() + 1;
		$this->pdf->SetFillColor(211,211,211);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell($cell_width,10,'Timer Sig',0,0,'C',TRUE);
		$current_x = $this->pdf->GetX() + 1;
		$this->pdf->SetFillColor(255,255,255);
		$this->pdf->SetXY($current_x,$current_y);
		$this->pdf->Cell($cell_width,10,'',1,0,'C',TRUE);
		
		return;
	}
	
}
?>